# Build a Xamarin.iOS project.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xamarin

trigger:
- 

jobs:
- job: iOS
  displayName: 'iOS'
  pool:
    vmImage: 'macos-latest'

  steps:
  # To manually select a Xamarin SDK version on the Microsoft-hosted macOS agent,
  # configure this task with the *Mono* version that is associated with the
  # Xamarin SDK version that you need, and set the "enabled" property to true.
  # See https://go.microsoft.com/fwlink/?linkid=871629
  - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 5_12_0
    displayName: 'Select the Xamarin SDK version'
    enabled: false

  # Xamarin.iOS
  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'distro.p12'
      certPwd: '$(p12pwd)'
      keychain: 'temp'

  - task: InstallAppleProvisioningProfile@1
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'CrossCam_Store_Dist.mobileprovision'

  - task: InstallAppleProvisioningProfile@1
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'CrossCam_Share_Extension_Store_Dist.mobileprovision'

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      restoreSolution: '**/*.sln'
      feedsToUse: 'config'
      nugetConfigPath: 'nuget.config'
      externalFeedCredentials: 'NuGet'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        sed -i '' 's/<string>1.0<\/string>/<string>$(myVersionNumber)<\/string>/g' CrossCam.iOS/Info.plist
        sed -i '' 's/<string>10.0<\/string>/<string>$(myVersionNumber)<\/string>/g' CrossCamShareExtension.iOS/Info.plist
        echo "MAIN PLIST"
        cat CrossCam.iOS/Info.plist
        echo "EXTENSION PLIST"
        cat CrossCamShareExtension.iOS/Info.plist

  - task: XamariniOS@2
    inputs:
      solutionFile: '**/*.sln'
      configuration: 'Release'
      buildForSimulator: false
      packageApp: true

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/s/CrossCam.iOS/bin/iPhone/Release'
      publishLocation: 'pipeline'

  - task: AppCenterDistribute@3
    inputs:
      serverEndpoint: 'App Center'
      appSlug: 'kra3030/CrossCam'
      appFile: '$(Pipeline.Workspace)/s/CrossCam.iOS/bin/iPhone/Release/CrossCam.iOS.ipa'
      symbolsDsymFiles: '$(Pipeline.Workspace)/s/CrossCam.iOS/bin/iPhone/Release/CrossCam.iOS.app.dSYM'
      releaseNotesOption: 'input'
      releaseNotesInput: '☂'
      destinationType: 'groups'
      isSilent: true

  - task: AppStoreRelease@1
    inputs:
      serviceEndpoint: 'App Store Connect API'
      releaseTrack: 'TestFlight'
      appType: 'iOS'
      shouldSkipWaitingForProcessing: true

#- job: Android
#  displayName: 'Android'
#  # Xamarin.Android
#  # Build a Xamarin.Android project.
#  # Add steps that test, sign, and distribute an app, save build artifacts, and more:
#  # https://docs.microsoft.com/azure/devops/pipelines/languages/xamarin
#  pool:
#    vmImage: 'windows-latest'
#
#  variables:
#    buildConfiguration: 'Release'
#    outputDirectory: '$(build.binariesDirectory)/$(buildConfiguration)'
#
#  steps:
#  - task: NuGetToolInstaller@1
#
#  - task: NuGetCommand@2
#    inputs:
#      command: 'restore'
#      restoreSolution: '**/*.sln'
#      feedsToUse: 'config'
#      nugetConfigPath: 'nuget.config'
#
#  - task: Bash@3
#    inputs:
#      targetType: 'inline'
#      script: |
#        sed -i 's/android:versionCode="1"/android:versionCode="$(buildNumber)"/g' CrossCam.Droid/Properties/AndroidManifest.xml
#        sed -i 's/android:versionName="1.0"/android:versionName="$(myVersionNumber)"/g' CrossCam.Droid/Properties/AndroidManifest.xml
#        cat CrossCam.Droid/Properties/AndroidManifest.xml
#
#  - task: JavaToolInstaller@0
#    inputs:
#      versionSpec: '11'
#      jdkArchitectureOption: 'x64'
#      jdkSourceOption: 'PreInstalled'
#
#  - task: Bash@3
#    inputs:
#      targetType: 'inline'
#      script: |
#        echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)"
#        echo "##vso[task.setvariable variable=PATH]$(JAVA_HOME_11_X64)\bin;$(PATH)"
#
#  - task: XamarinAndroid@1
#    inputs:
#      projectFile: '**/*droid*.csproj'
#      outputDirectory: 'output'
#      configuration: '$(buildConfiguration)'
#      jdkOption: 'JDKVersion'
#      jdkVersionOption: '1.11'
#
#  - task: AndroidSigning@3
#    inputs:
#      apkFiles: '$(Pipeline.Workspace)\s\CrossCam.Droid\output\com.kra2008.crosscam.apk'
#      apksignerKeystoreFile: 'kra2008Android.keystore'
#      apksignerKeystorePassword: '$(keystorePassword)'
#      apksignerKeystoreAlias: 'kra2008android'
#      apksignerKeyPassword: '$(keystorePassword)'
#
#  - task: PublishPipelineArtifact@1
#    inputs:
#      targetPath: '$(Pipeline.Workspace)\s\CrossCam.Droid\output\com.kra2008.crosscam.apk'
#      publishLocation: 'pipeline'
#      artifact: 'com.kra2008.crosscam.apk'
#
#  - task: AppCenterDistribute@3
#    inputs:
#      serverEndpoint: 'App Center'
#      appSlug: 'kra3030/CrossCam-1'
#      appFile: '$(Pipeline.Workspace)\s\CrossCam.Droid\output\com.kra2008.crosscam.apk'
#      symbolsOption: 'Android'
#      releaseNotesOption: 'input'
#      releaseNotesInput: '☃'
#      destinationType: 'groups'
#      isSilent: true